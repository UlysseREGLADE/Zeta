# This code where used to compute the values of Uz, as defined in the article.


import numpy as np
from zeta_toolkite import *

import matplotlib.pyplot as plt

zeros = [14.1347251417346937904572519835624766,
         21.0220396387715549926284795938969162,
         25.0108575801456887632137909925627734,
         30.4248761258595132103118975305839571,
         32.9350615877391896906623689640747418,
         37.5861781588256712572177634807052984,
         40.9187190121474951873981269146334247,
         43.3270732809149995194961221654068456,
         48.0051508811671597279424727494276636,
         49.7738324776723021819167846785638367,
         52.9703214777144606441472966088808216,
         56.4462476970633948043677594767060321,
         59.3470440026023530796536486749921759,
         60.8317785246098098442599018245240815,
         65.1125440480816066608750542531836072,
         67.0798105294941737144788288965220700,
         69.5464017111739792529268575265546586,
         72.0671576744819075825221079698261175,
         75.7046906990839331683269167620305404,
         77.1448400688748053726826648563046925,
         79.3373750202493679227635928771160578,
         82.9103808540860301831648374947705599,
         84.7354929805170501057353112068275569,
         87.4252746131252294065316678509191351,
         88.8091112076344654236823480795095125,
         92.4918992705584842962597252418104965,
         94.6513440405198869665979258152079645,
         95.8706342282453097587410292192466718,
         98.8311942181936922333244201386223539,
         101.317851005731391228785447940292361]

#zeros=np.linspace(0.1, 40, 400)

Us = []

for j in range(len(zeros)):

    zeta = Zeta(0.5-zeros[j]*1j)
    n = 160000
    #zeta = Zeta(3/4+ 1j)

    zeta.get_zeta(n)

    list = np.array(zeta.zeta_n)

    args = np.angle(list)

    for i in range(1, len(args)):

        if(args[i-1] + np.pi < args[i]):
            args[i::] -= 2*np.pi
        if(args[i-1] - np.pi > args[i]):
            args[i::] += 2*np.pi


    print("\n for the "+str(j)+" zero of zeta:")
    U = (-zeta.z.imag*np.log(n+1)-args[-1]+np.arctan(zeta.z.imag/(1-zeta.z.real)))/np.pi
    print("alpha value: "+str(zeta.alpha/np.pi))
    print(U)
    Us.append(U)

    # n = np.arange(n)
    # y = 8*np.pi-(-zeta.z.imag*np.log(n+1)-np.array(args)[2:] + np.arctan(zeta.z.imag/(1-zeta.z.real)))
    #
    # plt.figure()
    # plt.loglog(n, y)
    # plt.loglog(n, 20/n)
    # plt.grid(True)
    # plt.show()

# plt.figure()
# plt.title("plot of U_z for x=0.5")
# plt.plot(zeros, Us, label="U_(0.5-i*y)")
# plt.plot([14.1347251417346937904572519835624766,
#          21.0220396387715549926284795938969162,
#          25.0108575801456887632137909925627734,
#          30.4248761258595132103118975305839571,
#          32.9350615877391896906623689640747418,
#          37.5861781588256712572177634807052984], [0,0,0,0,0,0], 'ro', label="non-trivial zeros of zeta")
# plt.xlabel("y")
# plt.ylabel("U_(0.5-i*y)")
# plt.legend()
# plt.show()
